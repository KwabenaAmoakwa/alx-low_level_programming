!<arch>
0-isupper.o/    0           0     0     644     235       `
#include "main.h"
#include <stdio.h>
#include <ctype.h>

/**
 * _isupper - checks if character is uppercase
 * @c: character to be checked
 *
 * Return: Always 0.
 */
int _isupper(int c)
{
if (isupper(c))
{
return (1);
}
return (0);
}

0-memset.o/     0           0     0     644     318       `
#include "main.h"

/**
 * _memset - fills memory with a constant byte
 * @s: pointer
 * @b: constant byte
 * @n: number of bytes to be filled
 *
 * Return: a pointer to the memory area
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}
0-strcat.o/     0           0     0     644     333       `
#include "main.h"
#include <string.h>
/**
 * _strcat - concatenates two strings
 * @dest: string
 * @src: string
 *
 * Return: concatenated string
 *
 */
char *_strcat(char *dest, char *src)
{
	int i;
	int len1 = strlen(dest);
	int len2 = strlen(src);

	for (i = 0; i <= len2; i++)
	{
		dest[len1 + i] = src[i];
	}
	return (dest);
}

100-atoi.o/     0           0     0     644     595       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
	int i, d, n, len, f, digit;

	i = 0;
	d = 0;
	n = 0;
	len = 0;
	f = 0;
	digit = 0;

	while (s[len] != '\0')
		len++;

	while (i < len && f == 0)
	{
		if (s[i] == '-')
			++d;

		if (s[i] >= '0' && s[i] <= '9')
		{
			digit = s[i] - '0';
			if (d % 2)
				digit = -digit;
			n = n * 10 + digit;
			f = 1;
			if (s[i + 1] < '0' || s[i + 1] > '9')
				break;
			f = 0;
		}
		i++;
	}

	if (f == 0)
		return (0);

	return (n);
}


1-isdigit.o/    0           0     0     644     233       `
#include "main.h"
#include <stdio.h>
#include <ctype.h>

/**
 * _isdigit - checks if character is a digit
 * @c: character to be checked
 *
 * Return: Always 0.
 */
int _isdigit(int c)
{
if (isdigit(c))
{
return (1);
}
return (0);
}

1-memcpy.o/     0           0     0     644     334       `
#include "main.h"
/**
 * _memcpy - copies memory area
 * @dest: destinatin memory area
 * @src: source memory area
 * @n: number of bytes to be copied
 *
 * Return: pointer to dest
 *
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(dest + i) = src[i];
	}
	return (dest);
}
1-strncat.o/    0           0     0     644     488       `
#include "main.h"
#include <string.h>
/**
 * _strncat - concatenates two strings
 * @dest: string
 * @src: string
 * @n: number of bytes of second string to be concatenated
 *
 * Return: concatenated string
 *
 */
char *_strncat(char *dest, char *src, int n)
{
	int i;
	int len1 = strlen(dest);
	int len2 = strlen(src);

	if (len2 < n)
	{
	for (i = 0; i <= len2; i++)
	{
		dest[len1 + i] = src[i];
	}
return (dest);
}
for (i = 0; i < n; i++)
{
dest[len1 + i] = src[i];
}
return (dest);
}
2-strchr.o/     0           0     0     644     367       `
#include "main.h"
/**
 * _strchr - locates a character in a string
 * @s: string
 * @c: character
 *
 * Return: pointer to the first occurrence of the character c in the string s,
 * or NULL if the character is not found
 *
 */
char *_strchr(char *s, char c)
{
	int i;

	for (i = 0; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
		{
			return (&s[i]);
		}
	}
	return (0);
}

2-strlen.o/     0           0     0     644     217       `
#include "main.h"

/**
 *_strlen - returns lenght of a string
 * @s: string whos length is to be returned
 *
 *Return: 0 always
 *
 */
int _strlen(char *s)
{
int y;

y = 0;
while (s[y] != '\0')
{
y++;
}
return (y);
}

2-strncpy.o/    0           0     0     644     330       `
#include "main.h"
/**
 * _strncpy - copy a string
 * @dest: input value
 * @src: input value
 * @n: input value
 *
 * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
	int j;

	j = 0;
	while (j < n && src[j] != '\0')
	{
		dest[j] = src[j];
		j++;
	}
	while (j < n)
	{
		dest[j] = '\0';
		j++;
	}

	return (dest);
}
3-islower.o/    0           0     0     644     258       `
#include "main.h"
#include <ctype.h>
/**
 * _islower - checks if letter is lowercase
 * @c: the character to be checked
 *
 * Return: 1 if the character is lowercase. 0 otherwise
 */
int _islower(int c)
{
if (c > 97 && c < 123)
{
return (1);
}
return (0);
}
3-puts.o/       0           0     0     644     291       `
#include "main.h"
#include <stdio.h>

/**
 * _puts - prints a string, followed by a new line to stdout
 * @str: string to be printed
 *
 */
void _puts(char *str)
{
int len, i;

len = 0;
while (str[len] != '\0')
{
len++;
}

for (i = 0; i < len; i++)
{
	_putchar(str[i]);

}
_putchar('\n');
}

3-strcmp.o/     0           0     0     644     508       `
#include "main.h"
#include <string.h>
/**
 * _strcmp - compares two strings
 * @s1: string
 * @s2: string
 *
 * Return: 0 if strings are the same, 1 if s1 character
 * being compared has greater ASCII value, -1 if s1
 * character being compared has lesser ASCII value
 *
 */
int _strcmp(char *s1, char *s2)
{
	int i;
	int len = strlen(s1);

	for (i = 0; i <= len; i++)
	{
		if (s1[i] != s2[i])
		{
			if (s1[i] < s2[i])
			{
				return (s1[i] - s2[i]);
			}
			return (s1[i] - s2[i]);
		}
	}
	return (0);
}

3-strspn.o/     0           0     0     644     492       `
#include "main.h"

/**
 * _strspn - gets the length of a prefix substring
 * @s: string
 * @accept: sttring used for search
 *
 * Return: number of bytes in the initial segment of s which consist
 * only of bytes from accept
 *
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);

}
4-isalpha.o/    0           0     0     644     308       `
#include "main.h"
#include <ctype.h>
/**
 * _isalpha - checks if character is an alphabet
 * @c: the character to be checked
 *
 * Return: 1 if the character is an alphabet. 0 otherwise
 */
int _isalpha(int c)
{
if (c > 64 && c < 91)
{
return (1);
}
else if (c > 96 && c < 123)
{
return (1);
}
return (0);
}
4-strpbrk.o/    0           0     0     644     416       `
#include <stdio.h>

/**
 * _strpbrk - searches a string for any of a set of bytes
 * @s: string
 * @accept: string
 *
 * Return: a pointer to the byte in s that matches one of the bytes in accept,
 * or NULL if no such byte is found
 *
 */
char *_strpbrk(char *s, char *accept)
{
	int u;

		while (*s)
		{
			for (u = 0; accept[u]; u++)
			{
			if (*s == accept[u])
			return (s);
			}
		s++;
		}

	return ('\0');
}
5-strstr.o/     0           0     0     644     367       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *c = haystack;
		char *p = needle;

		while (*c == *p && *p != '\0')
		{
			c++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}

6-abs.o/        0           0     0     644     247       `
#include "main.h"
/**
 * _abs - prints absolute value of integer
 * @c: number to be checked
 *
 * Return: absolute value of number
 */
int _abs(int c)
{
int u;
if (c > 0)
{
return (c);
}
else if (c == 0)
{
return (0);
}
u = -1 * c;
return (u);
}

9-strcpy.o/     0           0     0     644     327       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
int l = 0;
int x = 0;

while (*(src + l) != '\0')
{
l++;
}
for ( ; x < l ; x++)
{
dest[x] = src[x];
}
dest[l] = '\0';
return (dest);
}

_putchar.o/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

